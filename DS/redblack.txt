#include <stdio.h>
#include <stdlib.h>

enum Color {
    RED,
    BLACK
};

struct Node {
    int key;
    enum Color color;
    struct Node* parent;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->key = key;
    newNode->color = RED; // New nodes are always red
    newNode->parent = newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int key);
void insertFixup(struct Node** root, struct Node* node);
void leftRotate(struct Node** root, struct Node* x);
void rightRotate(struct Node** root, struct Node* x);
void inorderTraversal(struct Node* root);

int main() {
    struct Node* root = NULL;
    int choice, key;

    do {
        printf("\n1. Insert a node\n");
        printf("2. Display in-order traversal\n");
        printf("3. Exit\n");
  printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                break;

            case 2:
                printf("In-order Traversal: ");
                inorderTraversal(root);
                printf("\n");
                break;

            case 3:
                // Free memory and exit
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }

    } while (choice != 3);

    return 0;
}

struct Node* insert(struct Node* root, int key) {
    struct Node* newNode = createNode(key);
    struct Node* parent = NULL;
    struct Node* current = root;

    // Traverse the tree to find the parent of the new node
    while (current != NULL) {
        parent = current;
        if (key < current->key)
            current = current->left;
        else
            current = current->right;
    }

    // Set the parent of the new node
newNode->parent = parent;

    // Set the new node as the child of the parent
    if (parent == NULL)
        root = newNode;
    else if (key < parent->key)
        parent->left = newNode;
    else
        parent->right = newNode;

    // Fix any violations of the Red-Black Tree properties
    insertFixup(&root, newNode);

    return root;
}

void insertFixup(struct Node** root, struct Node* node) {
    while (node->parent != NULL && node->parent->color == RED) {
        if (node->parent == node->parent->parent->left) {
            struct Node* uncle = node->parent->parent->right;

            if (uncle != NULL && uncle->color == RED) {
                // Case 1: Red uncle
                node->parent->color = BLACK;
                uncle->color = BLACK;
                node->parent->parent->color = RED;
                node = node->parent->parent;
            } else {
                if (node == node->parent->right) {
                    // Case 2: Right child
                    node = node->parent;
                    leftRotate(root, node);
                }

                // Case 3: Left child
                node->parent->color = BLACK;
                node->parent->parent->color = RED;
                rightRotate(root, node->parent->parent);
            }
        } else {
            // Symmetric cases
            struct Node* uncle = node->parent->parent->left;

            if (uncle != NULL && uncle->color == RED) {
  // Case 1: Red uncle
                node->parent->color = BLACK;
                uncle->color = BLACK;
                node->parent->parent->color = RED;
                node = node->parent->parent;
            } else {
                if (node == node->parent->left) {
                    // Case 2: Left child
                    node = node->parent;
                    rightRotate(root, node);
                }

                // Case 3: Right child
                node->parent->color = BLACK;
                node->parent->parent->color = RED;
                leftRotate(root, node->parent->parent);
            }
        }
    }

    (*root)->color = BLACK; // Root must always be black
}

void leftRotate(struct Node** root, struct Node* x) {
    struct Node* y = x->right;
    x->right = y->left;

    if (y->left != NULL)
        y->left->parent = x;

    y->parent = x->parent;

    if (x->parent == NULL)
        *root = y;
    else if (x == x->parent->left)
        x->parent->left = y;
    else
        x->parent->right = y;

    y->left = x;
    x->parent = y;
}

void rightRotate(struct Node** root, struct Node* y) {
struct Node* x = y->left;
    y->left = x->right;

    if (x->right != NULL)
        x->right->parent = y;

    x->parent = y->parent;

    if (y->parent == NULL)
        *root = x;
    else if (y == y->parent->left)
        y->parent->left = x;
    else
        y->parent->right = x;

    x->right = y;
    y->parent = x;
}

void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d(%c) ", root->key, (root->color == RED) ? 'r' : 'b');
        inorderTraversal(root->right);
    }
}
