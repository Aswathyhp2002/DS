#include <stdio.h>
#include <stdlib.h>

struct CircularQueue {
    int front, rear, maxSize;
    int *arr;
};

void initializeQueue(struct CircularQueue* cq, int size) {
    cq->maxSize = size;
    cq->arr = (int*)malloc(size * sizeof(int));
    cq->front = cq->rear = -1;
}

int isEmpty(struct CircularQueue* cq) {
    return cq->front == -1 && cq->rear == -1;
}

int isFull(struct CircularQueue* cq) {
    return (cq->rear + 1) % cq->maxSize == cq->front;
}

void enqueue(struct CircularQueue* cq, int element) {
    if (isFull(cq)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }

    if (isEmpty(cq)) {
        cq->front = cq->rear = 0;
    } else {
        cq->rear = (cq->rear + 1) % cq->maxSize;
    }

    cq->arr[cq->rear] = element;
    printf("%d enqueued to the queue.\n", element);
}

void dequeue(struct CircularQueue* cq) {
    if (isEmpty(cq)) {
         printf("Queue is empty. Cannot dequeue.\n");
        return;
    }

    printf("%d dequeued from the queue.\n", cq->arr[cq->front]);

    if (cq->front == cq->rear) {
        // Reset front and rear to -1 if the last element is dequeued
        cq->front = cq->rear = -1;
    } else {
        cq->front = (cq->front + 1) % cq->maxSize;
    }
}

void display(struct CircularQueue* cq) {
    if (isEmpty(cq)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Elements in the queue: ");
    int i = cq->front;

    do {
        printf("%d ", cq->arr[i]);
        i = (i + 1) % cq->maxSize;
    } while (i != (cq->rear + 1) % cq->maxSize);

    printf("\n");
}

void cleanupQueue(struct CircularQueue* cq) {
    free(cq->arr);
}

int main() {
    struct CircularQueue cq;
    int size;

    printf("Enter the size of the circular queue: ");
    scanf("%d", &size);

    initializeQueue(&cq, size);

    int choice, element;

    do {
        printf("\nCircular Queue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &element);
                enqueue(&cq, element);
                break;

            case 2:
                dequeue(&cq);
                break;

            case 3:
                display(&cq);
                break;

            case 0:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 0);

    cleanupQueue(&cq);

    return 0;
}

